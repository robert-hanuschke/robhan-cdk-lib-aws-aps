package robhancdklibawsaps

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/robert-hanuschke/robhan-cdk-lib-aws-aps/robhancdklibawsaps/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/robert-hanuschke/robhan-cdk-lib-aws-aps/robhancdklibawsaps/internal"
)

type ScraperBase interface {
	awscdk.Resource
	IScraper
	// An optional user-assigned scraper alias.
	//
	// 1-100 characters.
	//
	// Pattern: ^[0-9A-Za-z][-.0-9A-Z_a-z]*$
	Alias() *string
	// The Amazon Managed Service for Prometheus workspace the scraper sends metrics to.
	Destination() *Destination
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// The role configuration in an Amazon Managed Service for Prometheus scraper.
	RoleConfiguration() *RoleConfiguration
	// The configuration in use by the scraper.
	ScrapeConfiguration() *ScrapeConfiguration
	// The ARN of the scraper.
	ScraperArn() *string
	// The ID of the scraper.
	ScraperId() *string
	// The Amazon EKS cluster from which the scraper collects metrics.
	Source() *Source
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	GetScraperId(scraperArn *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for ScraperBase
type jsiiProxy_ScraperBase struct {
	internal.Type__awscdkResource
	jsiiProxy_IScraper
}

func (j *jsiiProxy_ScraperBase) Alias() *string {
	var returns *string
	_jsii_.Get(
		j,
		"alias",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) Destination() *Destination {
	var returns *Destination
	_jsii_.Get(
		j,
		"destination",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) RoleConfiguration() *RoleConfiguration {
	var returns *RoleConfiguration
	_jsii_.Get(
		j,
		"roleConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) ScrapeConfiguration() *ScrapeConfiguration {
	var returns *ScrapeConfiguration
	_jsii_.Get(
		j,
		"scrapeConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) ScraperArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"scraperArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) ScraperId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"scraperId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) Source() *Source {
	var returns *Source
	_jsii_.Get(
		j,
		"source",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ScraperBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


func NewScraperBase_Override(s ScraperBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@robhan-cdk-lib/aws_aps.ScraperBase",
		[]interface{}{scope, id, props},
		s,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ScraperBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateScraperBase_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_aps.ScraperBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func ScraperBase_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateScraperBase_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_aps.ScraperBase",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func ScraperBase_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateScraperBase_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_aps.ScraperBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScraperBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := s.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		s,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (s *jsiiProxy_ScraperBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScraperBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := s.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScraperBase) GetResourceNameAttribute(nameAttr *string) *string {
	if err := s.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScraperBase) GetScraperId(scraperArn *string) *string {
	if err := s.validateGetScraperIdParameters(scraperArn); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		s,
		"getScraperId",
		[]interface{}{scraperArn},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_ScraperBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

